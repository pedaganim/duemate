name: Deploy to AWS

on:
  push:
    branches:
      - main
      - staging
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        default: 'dev'
        options:
          - dev
          - staging
          - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        default: 'apply'
        options:
          - plan
          - apply
          - destroy

env:
  NODE_VERSION: '20.x'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Job to determine which environment to deploy to
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      terraform_action: ${{ steps.set-env.outputs.terraform_action }}
    steps:
      - name: Set Environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "terraform_action=${{ inputs.terraform_action }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "terraform_action=apply" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "terraform_action=apply" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "terraform_action=apply" >> $GITHUB_OUTPUT
          fi

  # Build and test the application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma generate
        run: npm run prisma:generate

      - name: Build TypeScript
        run: npm run build

      - name: Run tests
        run: npm test || echo "Tests not yet implemented"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            node_modules/
            package.json
            package-lock.json
            prisma/
          retention-days: 1

  # Deploy infrastructure with Terraform
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      api_endpoint: ${{ steps.terraform-output.outputs.api_endpoint }}
      frontend_url: ${{ steps.terraform-output.outputs.frontend_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" || terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -var="aws_region=${{ secrets.AWS_REGION || 'us-east-1' }}" \
            -out=tfplan

      - name: Terraform Apply
        if: needs.determine-environment.outputs.terraform_action == 'apply'
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: needs.determine-environment.outputs.terraform_action == 'destroy'
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -var="aws_region=${{ secrets.AWS_REGION || 'us-east-1' }}"

      - name: Get Terraform Outputs
        if: needs.determine-environment.outputs.terraform_action != 'destroy'
        id: terraform-output
        working-directory: ./terraform
        run: |
          API_ENDPOINT=$(terraform output -raw api_gateway_endpoint 2>/dev/null || echo "")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "")
          echo "api_endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT
          echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT

  # Deploy application code
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-infrastructure]
    if: needs.determine-environment.outputs.terraform_action != 'destroy'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy Lambda Functions
        run: |
          chmod +x ./scripts/deploy-lambda.sh
          ./scripts/deploy-lambda.sh ${{ needs.determine-environment.outputs.environment }}

      - name: Run Database Migrations
        run: |
          chmod +x ./scripts/run-migrations.sh
          ./scripts/run-migrations.sh ${{ needs.determine-environment.outputs.environment }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy frontend (if applicable)
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    if: needs.determine-environment.outputs.terraform_action != 'destroy'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy Frontend to S3
        if: hashFiles('frontend/**') != ''
        run: |
          if [ -d "frontend" ]; then
            chmod +x ./scripts/deploy-frontend.sh
            ./scripts/deploy-frontend.sh ${{ needs.determine-environment.outputs.environment }}
          else
            echo "No frontend directory found, skipping frontend deployment"
          fi

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-application, deploy-infrastructure]
    if: needs.determine-environment.outputs.terraform_action != 'destroy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Verify Lambda Functions
        run: |
          chmod +x ./scripts/verify-deployment.sh
          ./scripts/verify-deployment.sh ${{ needs.determine-environment.outputs.environment }}

      - name: Run Smoke Tests
        if: needs.deploy-infrastructure.outputs.api_endpoint != ''
        run: |
          API_ENDPOINT="${{ needs.deploy-infrastructure.outputs.api_endpoint }}"
          echo "Testing API endpoint: $API_ENDPOINT"

          # Test health endpoint
          curl -f "$API_ENDPOINT/health" || echo "Health check endpoint not available yet"

          # Test API documentation
          curl -f "$API_ENDPOINT/api-docs" || echo "API docs endpoint not available yet"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ secrets.AWS_REGION || 'us-east-1' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ needs.deploy-infrastructure.outputs.api_endpoint }}" ]; then
            echo "**API Endpoint:** ${{ needs.deploy-infrastructure.outputs.api_endpoint }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ needs.deploy-infrastructure.outputs.frontend_url }}" ]; then
            echo "**Frontend URL:** ${{ needs.deploy-infrastructure.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
